{"filter":false,"title":"Entradas.py","tooltip":"/Entradas.py","undoManager":{"mark":4,"position":4,"stack":[[{"start":{"row":0,"column":0},"end":{"row":8,"column":61},"action":"insert","lines":["import random","import string","","# Definir el conjunto de caracteres: letras mayúsculas y números","caracteres = string.ascii_uppercase + string.digits","","# Generar una cadena aleatoria de 11 caracteres","cadena_aleatoria = ''.join(random.choices(caracteres, k=11))","print(f\"La cadena aleatoria generada es: {cadena_aleatoria}\")"],"id":10}],[{"start":{"row":0,"column":0},"end":{"row":8,"column":61},"action":"remove","lines":["import random","import string","","# Definir el conjunto de caracteres: letras mayúsculas y números","caracteres = string.ascii_uppercase + string.digits","","# Generar una cadena aleatoria de 11 caracteres","cadena_aleatoria = ''.join(random.choices(caracteres, k=11))","print(f\"La cadena aleatoria generada es: {cadena_aleatoria}\")"],"id":11},{"start":{"row":0,"column":0},"end":{"row":11,"column":34},"action":"insert","lines":["import random","import string","","# Definir el conjunto de caracteres: letras mayúsculas y números","caracteres = string.ascii_uppercase + string.digits","","# Generar 10 cadenas aleatorias de 11 caracteres cada una","cadenas_aleatorias = [''.join(random.choices(caracteres, k=11)) for _ in range(10)]","","# Mostrar las cadenas generadas","for i, cadena in enumerate(cadenas_aleatorias, 1):","    print(f\"Código {i}: {cadena}\")"]}],[{"start":{"row":0,"column":0},"end":{"row":11,"column":34},"action":"remove","lines":["import random","import string","","# Definir el conjunto de caracteres: letras mayúsculas y números","caracteres = string.ascii_uppercase + string.digits","","# Generar 10 cadenas aleatorias de 11 caracteres cada una","cadenas_aleatorias = [''.join(random.choices(caracteres, k=11)) for _ in range(10)]","","# Mostrar las cadenas generadas","for i, cadena in enumerate(cadenas_aleatorias, 1):","    print(f\"Código {i}: {cadena}\")"],"id":12},{"start":{"row":0,"column":0},"end":{"row":12,"column":36},"action":"insert","lines":["import re","","def validar_codigo(codigo):","    # Expresión regular para el patrón","    patron = r\"^[A-Z]{3}\\d[A-Z]\\d{5}[A-Z]$\"","    return bool(re.match(patron, codigo))","","# Prueba con un código","codigo = \"RKA8L68197Q\"","if validar_codigo(codigo):","    print(\"El código es válido.\")","else:","    print(\"El código no es válido.\")"]}],[{"start":{"row":0,"column":0},"end":{"row":12,"column":36},"action":"remove","lines":["import re","","def validar_codigo(codigo):","    # Expresión regular para el patrón","    patron = r\"^[A-Z]{3}\\d[A-Z]\\d{5}[A-Z]$\"","    return bool(re.match(patron, codigo))","","# Prueba con un código","codigo = \"RKA8L68197Q\"","if validar_codigo(codigo):","    print(\"El código es válido.\")","else:","    print(\"El código no es válido.\")"],"id":13},{"start":{"row":0,"column":0},"end":{"row":18,"column":17},"action":"insert","lines":["import random","import string","","def generar_codigos_aleatorios(cantidad=10):","    codigos = []","    for _ in range(cantidad):","        # Generar las partes del código según el patrón","        parte1 = ''.join(random.choices(string.ascii_uppercase, k=3))  # Tres letras al inicio","        parte2 = f\"{random.randint(0, 9)}{random.choice(string.ascii_uppercase)}\"  # Un número y una letra","        parte3 = ''.join(random.choices(string.digits, k=5))  # Cinco números consecutivos","        parte4 = random.choice(string.ascii_uppercase)  # Una letra al final","        codigo = f\"{parte1}{parte2}{parte3}{parte4}\"","        codigos.append(codigo)","    return codigos","","# Generar 10 códigos aleatorios","codigos_aleatorios = generar_codigos_aleatorios()","for codigo in codigos_aleatorios:","    print(codigo)"]}],[{"start":{"row":0,"column":0},"end":{"row":18,"column":17},"action":"remove","lines":["import random","import string","","def generar_codigos_aleatorios(cantidad=10):","    codigos = []","    for _ in range(cantidad):","        # Generar las partes del código según el patrón","        parte1 = ''.join(random.choices(string.ascii_uppercase, k=3))  # Tres letras al inicio","        parte2 = f\"{random.randint(0, 9)}{random.choice(string.ascii_uppercase)}\"  # Un número y una letra","        parte3 = ''.join(random.choices(string.digits, k=5))  # Cinco números consecutivos","        parte4 = random.choice(string.ascii_uppercase)  # Una letra al final","        codigo = f\"{parte1}{parte2}{parte3}{parte4}\"","        codigos.append(codigo)","    return codigos","","# Generar 10 códigos aleatorios","codigos_aleatorios = generar_codigos_aleatorios()","for codigo in codigos_aleatorios:","    print(codigo)"],"id":14},{"start":{"row":0,"column":0},"end":{"row":39,"column":17},"action":"insert","lines":["import random","import string","","# Función para validar el formato del código","def validar_codigo(codigo):","    # El patrón esperado","    if len(codigo) != 11:","        return False","    if not codigo[:3].isalpha() or not codigo[:3].isupper():  # Tres letras al inicio","        return False","    if not codigo[3].isdigit():  # Un número en la posición 4","        return False","    if not codigo[4].isalpha() or not codigo[4].isupper():  # Una letra en la posición 5","        return False","    if not codigo[5:10].isdigit():  # Cinco números consecutivos","        return False","    if not codigo[10].isalpha() or not codigo[10].isupper():  # Una letra al final","        return False","    return True","","# Función para generar códigos aleatorios válidos","def generar_codigos_reducidos(cantidad=10, prefijos=[\"RKA\", \"DLQ\", \"LIN\"]):","    codigos = []","    while len(codigos) < cantidad:","        # Seleccionar un prefijo permitido","        parte1 = random.choice(prefijos)","        parte2 = f\"{random.randint(0, 9)}{random.choice(string.ascii_uppercase)}\"  # Un número y una letra","        parte3 = ''.join(random.choices(string.digits, k=5))  # Cinco números consecutivos","        parte4 = random.choice(string.ascii_uppercase)  # Una letra al final","        codigo = f\"{parte1}{parte2}{parte3}{parte4}\"","        ","        # Validar antes de agregar","        if validar_codigo(codigo):","            codigos.append(codigo)","    return codigos","","# Generar 10 códigos reducidos","codigos_reducidos = generar_codigos_reducidos()","for codigo in codigos_reducidos:","    print(codigo)"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":39,"column":17},"end":{"row":39,"column":17},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1732765787733,"hash":"24ac8e4885e2d83fabc983ac56896e56b63de1e9"}